"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@toruslabs+base-controllers_31c992c0278678d96be0c00843c9f41f";
exports.ids = ["vendor-chunks/@toruslabs+base-controllers_31c992c0278678d96be0c00843c9f41f"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@toruslabs+base-controllers_31c992c0278678d96be0c00843c9f41f/node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js":
/*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@toruslabs+base-controllers_31c992c0278678d96be0c00843c9f41f/node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js ***!
  \**************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCOUNT_CATEGORY: () => (/* binding */ ACCOUNT_CATEGORY),\n/* harmony export */   ACTIVITY_ACTION: () => (/* binding */ ACTIVITY_ACTION),\n/* harmony export */   ACTIVITY_ACTION_ACCEPT_NFT_OFFER: () => (/* binding */ ACTIVITY_ACTION_ACCEPT_NFT_OFFER),\n/* harmony export */   ACTIVITY_ACTION_ALL: () => (/* binding */ ACTIVITY_ACTION_ALL),\n/* harmony export */   ACTIVITY_ACTION_BURN: () => (/* binding */ ACTIVITY_ACTION_BURN),\n/* harmony export */   ACTIVITY_ACTION_CANCEL_NFT_OFFER: () => (/* binding */ ACTIVITY_ACTION_CANCEL_NFT_OFFER),\n/* harmony export */   ACTIVITY_ACTION_CREATE_NFT_OFFER: () => (/* binding */ ACTIVITY_ACTION_CREATE_NFT_OFFER),\n/* harmony export */   ACTIVITY_ACTION_CREATE_TRUSTLINE: () => (/* binding */ ACTIVITY_ACTION_CREATE_TRUSTLINE),\n/* harmony export */   ACTIVITY_ACTION_RECEIVE: () => (/* binding */ ACTIVITY_ACTION_RECEIVE),\n/* harmony export */   ACTIVITY_ACTION_REMOVE_TRUSTLINE: () => (/* binding */ ACTIVITY_ACTION_REMOVE_TRUSTLINE),\n/* harmony export */   ACTIVITY_ACTION_SEND: () => (/* binding */ ACTIVITY_ACTION_SEND),\n/* harmony export */   ACTIVITY_ACTION_TOPUP: () => (/* binding */ ACTIVITY_ACTION_TOPUP),\n/* harmony export */   ACTIVITY_PERIOD_ALL: () => (/* binding */ ACTIVITY_PERIOD_ALL),\n/* harmony export */   ACTIVITY_PERIOD_MONTH_ONE: () => (/* binding */ ACTIVITY_PERIOD_MONTH_ONE),\n/* harmony export */   ACTIVITY_PERIOD_MONTH_SIX: () => (/* binding */ ACTIVITY_PERIOD_MONTH_SIX),\n/* harmony export */   ACTIVITY_PERIOD_WEEK_ONE: () => (/* binding */ ACTIVITY_PERIOD_WEEK_ONE),\n/* harmony export */   ACTIVITY_STATUS_CANCELLED: () => (/* binding */ ACTIVITY_STATUS_CANCELLED),\n/* harmony export */   ACTIVITY_STATUS_CANCELLING: () => (/* binding */ ACTIVITY_STATUS_CANCELLING),\n/* harmony export */   ACTIVITY_STATUS_PENDING: () => (/* binding */ ACTIVITY_STATUS_PENDING),\n/* harmony export */   ACTIVITY_STATUS_SUCCESSFUL: () => (/* binding */ ACTIVITY_STATUS_SUCCESSFUL),\n/* harmony export */   ACTIVITY_STATUS_UNSUCCESSFUL: () => (/* binding */ ACTIVITY_STATUS_UNSUCCESSFUL),\n/* harmony export */   BROADCAST_CHANNELS: () => (/* binding */ BROADCAST_CHANNELS),\n/* harmony export */   BROADCAST_CHANNELS_MSGS: () => (/* binding */ BROADCAST_CHANNELS_MSGS),\n/* harmony export */   BUTTON_POSITION: () => (/* binding */ BUTTON_POSITION),\n/* harmony export */   BaseBlockTracker: () => (/* binding */ BaseBlockTracker),\n/* harmony export */   BaseController: () => (/* binding */ BaseController),\n/* harmony export */   BaseCurrencyController: () => (/* binding */ BaseCurrencyController),\n/* harmony export */   BaseEmbedController: () => (/* binding */ BaseEmbedController),\n/* harmony export */   BaseKeyringController: () => (/* binding */ BaseKeyringController),\n/* harmony export */   BasePreferencesController: () => (/* binding */ BasePreferencesController),\n/* harmony export */   BaseTransactionStateManager: () => (/* binding */ BaseTransactionStateManager),\n/* harmony export */   BroadcastChannelHandler: () => (/* binding */ BroadcastChannelHandler),\n/* harmony export */   CHAIN_NAMESPACES: () => (/* binding */ CHAIN_NAMESPACES),\n/* harmony export */   COMMUNICATION_JRPC_METHODS: () => (/* binding */ COMMUNICATION_JRPC_METHODS),\n/* harmony export */   COMMUNICATION_NOTIFICATIONS: () => (/* binding */ COMMUNICATION_NOTIFICATIONS),\n/* harmony export */   CONFIRMATION_STRATEGY: () => (/* binding */ CONFIRMATION_STRATEGY),\n/* harmony export */   CommunicationWindowManager: () => (/* binding */ CommunicationWindowManager),\n/* harmony export */   ControllerEvents: () => (/* binding */ ControllerEvents),\n/* harmony export */   DEFAULT_PREFERENCES: () => (/* binding */ DEFAULT_PREFERENCES),\n/* harmony export */   FEATURES_CONFIRM_WINDOW: () => (/* binding */ FEATURES_CONFIRM_WINDOW),\n/* harmony export */   FEATURES_DEFAULT_POPUP_WINDOW: () => (/* binding */ FEATURES_DEFAULT_POPUP_WINDOW),\n/* harmony export */   FEATURES_DEFAULT_WALLET_WINDOW: () => (/* binding */ FEATURES_DEFAULT_WALLET_WINDOW),\n/* harmony export */   FEATURES_PROVIDER_CHANGE_WINDOW: () => (/* binding */ FEATURES_PROVIDER_CHANGE_WINDOW),\n/* harmony export */   LOGIN_PROVIDER: () => (/* binding */ LOGIN_PROVIDER),\n/* harmony export */   PAYMENT_PROVIDER: () => (/* binding */ PAYMENT_PROVIDER),\n/* harmony export */   POPUP_LOADED: () => (/* binding */ POPUP_LOADED),\n/* harmony export */   POPUP_RESULT: () => (/* binding */ POPUP_RESULT),\n/* harmony export */   PROVIDER_JRPC_METHODS: () => (/* binding */ PROVIDER_JRPC_METHODS),\n/* harmony export */   PROVIDER_NOTIFICATIONS: () => (/* binding */ PROVIDER_NOTIFICATIONS),\n/* harmony export */   PopupHandler: () => (/* binding */ PopupHandler),\n/* harmony export */   PopupStoreChannel: () => (/* binding */ PopupStoreChannel),\n/* harmony export */   PopupWithBcHandler: () => (/* binding */ PopupWithBcHandler),\n/* harmony export */   RedirectHandler: () => (/* binding */ RedirectHandler),\n/* harmony export */   SETUP_COMPLETE: () => (/* binding */ SETUP_COMPLETE),\n/* harmony export */   StreamWindow: () => (/* binding */ StreamWindow),\n/* harmony export */   TRANSACTION_TYPES: () => (/* binding */ TRANSACTION_TYPES),\n/* harmony export */   TX_EVENTS: () => (/* binding */ TX_EVENTS),\n/* harmony export */   TransactionStatus: () => (/* binding */ TransactionStatus),\n/* harmony export */   UserError: () => (/* binding */ UserError),\n/* harmony export */   WSApiClient: () => (/* binding */ WSApiClient),\n/* harmony export */   addressSlicer: () => (/* binding */ addressSlicer),\n/* harmony export */   authServer: () => (/* binding */ authServer),\n/* harmony export */   broadcastChannelOptions: () => (/* binding */ broadcastChannelOptions),\n/* harmony export */   cloneDeep: () => (/* binding */ cloneDeep),\n/* harmony export */   concatSig: () => (/* binding */ concatSig),\n/* harmony export */   createChangeProviderMiddlewareMiddleware: () => (/* binding */ createChangeProviderMiddlewareMiddleware),\n/* harmony export */   createCommunicationMiddleware: () => (/* binding */ createCommunicationMiddleware),\n/* harmony export */   createEventEmitterProxy: () => (/* binding */ createEventEmitterProxy),\n/* harmony export */   createFetchConfigFromReq: () => (/* binding */ createFetchConfigFromReq),\n/* harmony export */   createFetchMiddleware: () => (/* binding */ createFetchMiddleware),\n/* harmony export */   createGenericJRPCMiddleware: () => (/* binding */ createGenericJRPCMiddleware),\n/* harmony export */   createInflightCacheMiddleware: () => (/* binding */ createInflightCacheMiddleware),\n/* harmony export */   createLoggerMiddleware: () => (/* binding */ createLoggerMiddleware),\n/* harmony export */   createOriginMiddleware: () => (/* binding */ createOriginMiddleware),\n/* harmony export */   createRandomId: () => (/* binding */ createRandomId),\n/* harmony export */   createSwappableProxy: () => (/* binding */ createSwappableProxy),\n/* harmony export */   createTopupMiddleware: () => (/* binding */ createTopupMiddleware),\n/* harmony export */   formatDate: () => (/* binding */ formatDate),\n/* harmony export */   formatSmallNumbers: () => (/* binding */ formatSmallNumbers),\n/* harmony export */   formatTime: () => (/* binding */ formatTime),\n/* harmony export */   getCustomDeviceInfo: () => (/* binding */ getCustomDeviceInfo),\n/* harmony export */   getHeaders: () => (/* binding */ getHeaders),\n/* harmony export */   getPopupFeatures: () => (/* binding */ getPopupFeatures),\n/* harmony export */   getTxStatusText: () => (/* binding */ getTxStatusText),\n/* harmony export */   handleRedirectParameters: () => (/* binding */ handleRedirectParameters),\n/* harmony export */   hashMessage: () => (/* binding */ hashMessage),\n/* harmony export */   intToHex: () => (/* binding */ intToHex),\n/* harmony export */   isUnauthorizedError: () => (/* binding */ isUnauthorizedError),\n/* harmony export */   omitBy: () => (/* binding */ omitBy),\n/* harmony export */   padWithZeroes: () => (/* binding */ padWithZeroes),\n/* harmony export */   pickBy: () => (/* binding */ pickBy),\n/* harmony export */   randomId: () => (/* binding */ randomId),\n/* harmony export */   signChallenge: () => (/* binding */ signChallenge),\n/* harmony export */   signMessage: () => (/* binding */ signMessage),\n/* harmony export */   significantDigits: () => (/* binding */ significantDigits),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   timeout: () => (/* binding */ timeout$1),\n/* harmony export */   transactionMatchesNetwork: () => (/* binding */ transactionMatchesNetwork),\n/* harmony export */   verifySignedChallenge: () => (/* binding */ verifySignedChallenge)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"(ssr)/./node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js\");\n/* harmony import */ var _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/.pnpm/@toruslabs+openlogin-jrpc@8.3.0_@babel+runtime@7.28.4/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/.pnpm/@toruslabs+http-helpers@6.1.1_@babel+runtime@7.28.4/node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/.pnpm/loglevel@1.9.2/node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/.pnpm/@ethereumjs+util@9.1.0/node_modules/@ethereumjs/util/dist/esm/index.js\");\n/* harmony import */ var _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @toruslabs/openlogin-utils */ \"(ssr)/./node_modules/.pnpm/@toruslabs+openlogin-utils@8.2.1_@babel+runtime@7.28.4/node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/.pnpm/bignumber.js@9.3.1/node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @toruslabs/broadcast-channel */ \"(ssr)/./node_modules/.pnpm/@toruslabs+broadcast-channe_5b4688505f9b6dcc6d19cf7d5d042156/node_modules/@toruslabs/broadcast-channel/dist/broadcastChannel.esm.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! bowser */ \"(ssr)/./node_modules/.pnpm/bowser@2.12.1/node_modules/bowser/src/bowser.js\");\n/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! jwt-decode */ \"(ssr)/./node_modules/.pnpm/jwt-decode@4.0.0/node_modules/jwt-decode/build/esm/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Controller class that provides configuration, state management, and subscriptions\n */\nclass BaseController extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.SafeEventEmitter {\n  /**\n   * Creates a BaseController instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor({\n    config = {},\n    state = {}\n  }) {\n    super();\n    // Use assign since generics can't be spread: https://git.io/vpRhY\n    /**\n     * Default options used to configure this controller\n     */\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"defaultConfig\", {});\n    /**\n     * Default state set on this controller\n     */\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"defaultState\", {});\n    /**\n     * Determines if listeners are notified of state changes\n     */\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"disabled\", false);\n    /**\n     * Name of this controller used during composition\n     */\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", \"BaseController\");\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"initialConfig\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"initialState\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"internalConfig\", this.defaultConfig);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"internalState\", this.defaultState);\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n\n  /**\n   * Retrieves current controller configuration options\n   *\n   * @returns - Current configuration\n   */\n  get config() {\n    return this.internalConfig;\n  }\n\n  /**\n   * Retrieves current controller state\n   *\n   * @returns - Current state\n   */\n  get state() {\n    return this.internalState;\n  }\n\n  /**\n   * Updates controller configuration\n   *\n   * @param config - New configuration options\n   * @param overwrite - Overwrite config instead of merging\n   * @param fullUpdate - Boolean that defines if the update is partial or not\n   */\n  configure(config, overwrite = false, fullUpdate = true) {\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n      for (const key in this.internalConfig) {\n        if (typeof this.internalConfig[key] !== \"undefined\") {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          this[key] = this.internalConfig[key];\n        }\n      }\n    } else {\n      for (const key in config) {\n        /* istanbul ignore else */\n        if (typeof this.internalConfig[key] !== \"undefined\") {\n          this.internalConfig[key] = config[key];\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          this[key] = config[key];\n        }\n      }\n    }\n  }\n\n  /**\n   * Updates controller state\n   *\n   * @param state - New state\n   * @param overwrite - Overwrite state instead of merging\n   */\n  update(state, overwrite = false) {\n    this.internalState = overwrite ? _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, state) : _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.internalState), state);\n    this.emit(\"store\", this.internalState);\n  }\n\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns - This controller instance\n   */\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n}\n\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue) => accumulator + currentValue;\nconst blockTrackerEvents = [\"sync\", \"latest\"];\nclass BaseBlockTracker extends BaseController {\n  constructor({\n    config = {},\n    state = {}\n  }) {\n    super({\n      config,\n      state\n    });\n\n    // config\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", \"BaseBlockTracker\");\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_blockResetTimeout\", void 0);\n    this.defaultState = {\n      _currentBlock: {\n        idempotencyKey: \"\"\n      },\n      _isRunning: false\n    };\n    this.defaultConfig = {\n      blockResetDuration: 20 * sec\n    };\n    this.initialize();\n\n    // bind functions for internal use\n    this._onNewListener = this._onNewListener.bind(this);\n    this._onRemoveListener = this._onRemoveListener.bind(this);\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n\n    // listen for handler changes\n    this._setupInternalEvents();\n  }\n  isRunning() {\n    return this.state._isRunning;\n  }\n  getCurrentBlock() {\n    return this.state._currentBlock;\n  }\n  async getLatestBlock() {\n    // return if available\n    if (this.state._currentBlock.idempotencyKey) {\n      return this.state._currentBlock;\n    }\n    // wait for a new latest block\n    const latestBlock = await new Promise(resolve => {\n      this.once(\"latest\", block => {\n        if (block) {\n          resolve(block);\n        }\n      });\n    });\n    // return newly set current block\n    return latestBlock;\n  }\n\n  // dont allow module consumer to remove our internal event listeners\n  removeAllListeners(eventName) {\n    if (eventName) {\n      super.removeAllListeners(eventName);\n    } else {\n      super.removeAllListeners();\n    }\n    // re-add internal events\n    this._setupInternalEvents();\n    // trigger stop check just in case\n    this._onRemoveListener();\n    return this;\n  }\n\n  /**\n   * To be implemented in subclass.\n   */\n  _start() {\n    // default behavior is noop\n  }\n\n  /**\n   * To be implemented in subclass.\n   */\n  _end() {\n    // default behavior is noop\n  }\n  _newPotentialLatest(newBlock) {\n    const currentBlock = this.state._currentBlock;\n    // only update if block number is higher\n    if (currentBlock && newBlock.idempotencyKey === currentBlock.idempotencyKey) {\n      return;\n    }\n    this._setCurrentBlock(newBlock);\n  }\n  _setupInternalEvents() {\n    // first remove listeners for idempotency\n    this.removeListener(\"newListener\", this._onNewListener);\n    this.removeListener(\"removeListener\", this._onRemoveListener);\n    // then add them\n    this.on(\"removeListener\", this._onRemoveListener);\n    this.on(\"newListener\", this._onNewListener);\n  }\n  _onNewListener() {\n    this._maybeStart();\n  }\n  _onRemoveListener() {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) {\n      return;\n    }\n    this._maybeEnd();\n  }\n  _maybeStart() {\n    if (this.state._isRunning) {\n      return;\n    }\n    this.state._isRunning = true;\n    // cancel setting latest block to stale\n    this._cancelBlockResetTimeout();\n    this._start();\n  }\n  _maybeEnd() {\n    if (!this.state._isRunning) {\n      return;\n    }\n    this.state._isRunning = false;\n    this._setupBlockResetTimeout();\n    this._end();\n  }\n  _getBlockTrackerEventCount() {\n    return blockTrackerEvents.map(eventName => this.listenerCount(eventName)).reduce(calculateSum);\n  }\n  _setCurrentBlock(newBlock) {\n    const oldBlock = this.state._currentBlock;\n    this.update({\n      _currentBlock: newBlock\n    });\n    this.emit(\"latest\", newBlock);\n    this.emit(\"sync\", {\n      oldBlock,\n      newBlock\n    });\n  }\n  _setupBlockResetTimeout() {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout();\n    // clear latest block when stale\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this.config.blockResetDuration);\n\n    // nodejs - dont hold process open\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref();\n    }\n  }\n  _cancelBlockResetTimeout() {\n    if (this._blockResetTimeout) {\n      clearTimeout(this._blockResetTimeout);\n    }\n  }\n  _resetCurrentBlock() {\n    this.update({\n      _currentBlock: {\n        idempotencyKey: \"\"\n      }\n    });\n  }\n}\n\nconst filterNoop = () => true;\nconst internalEvents = [\"newListener\", \"removeListener\"];\nconst externalEventFilter = name => !internalEvents.includes(name);\nfunction getRawListeners(eventEmitter, name) {\n  // prefer native\n  return typeof eventEmitter.rawListeners !== \"undefined\" ? eventEmitter.rawListeners(name) : eventEmitter.listeners(name);\n}\nfunction createEventEmitterProxy(initialTarget, opts) {\n  // parse options\n  const finalOpts = opts || {};\n  let eventFilter = finalOpts.eventFilter || filterNoop;\n  if (typeof eventFilter === \"string\" && eventFilter === \"skipInternal\") eventFilter = externalEventFilter;\n  if (typeof eventFilter !== \"function\") throw new Error(\"createEventEmitterProxy - Invalid eventFilter\");\n  let target = initialTarget;\n  let setTarget = newTarget => {\n    const oldTarget = target;\n    target = newTarget;\n    oldTarget.eventNames().filter(eventFilter).forEach(name => {\n      getRawListeners(oldTarget, name).forEach(handler => {\n        newTarget.on(name, handler);\n      });\n    });\n\n    // remove old listeners\n    oldTarget.removeAllListeners();\n  };\n  const proxy = new Proxy({}, {\n    get: (_, name) => {\n      // override `setTarget` access\n      if (name === \"setTarget\") return setTarget;\n      return target[name];\n    },\n    set: (_, name, value) => {\n      // allow `setTarget` overrides\n      if (name === \"setTarget\") {\n        setTarget = value;\n        return true;\n      }\n      target[name] = value;\n      return true;\n    }\n  });\n  return proxy;\n}\n\nfunction createSwappableProxy(initialTarget) {\n  let target = initialTarget;\n  let setTarget = newTarget => {\n    target = newTarget;\n  };\n  const proxy = new Proxy({}, {\n    get: (_, name) => {\n      // override `setTarget` access\n      if (name === \"setTarget\") return setTarget;\n      return target[name];\n    },\n    set: (_, name, value) => {\n      // allow `setTarget` overrides\n      if (name === \"setTarget\") {\n        setTarget = value;\n        return true;\n      }\n      target[name] = value;\n      return true;\n    }\n  });\n  return proxy;\n}\n\n// every ten minutes\nconst POLLING_INTERVAL = 600000;\nclass BaseCurrencyController extends BaseController {\n  constructor({\n    config = {},\n    state\n  }) {\n    super({\n      config,\n      state\n    });\n    this.defaultState = {\n      currentCurrency: \"usd\",\n      conversionRate: 0,\n      conversionDate: \"N/A\",\n      nativeCurrency: \"ETH\"\n    };\n    this.defaultConfig = {\n      pollInterval: POLLING_INTERVAL\n    };\n    this.initialize();\n  }\n\n  //\n  // PUBLIC METHODS\n  //\n\n  getNativeCurrency() {\n    return this.state.nativeCurrency;\n  }\n  setNativeCurrency(nativeCurrency) {\n    this.update({\n      nativeCurrency,\n      ticker: nativeCurrency\n    });\n  }\n  getCurrentCurrency() {\n    return this.state.currentCurrency;\n  }\n  setCurrentCurrency(currentCurrency) {\n    this.update({\n      currentCurrency\n    });\n  }\n\n  /**\n   * A getter for the conversionRate property\n   *\n   * @returns The conversion rate from ETH to the selected currency.\n   *\n   */\n  getConversionRate() {\n    return this.state.conversionRate;\n  }\n  setConversionRate(conversionRate) {\n    this.update({\n      conversionRate\n    });\n  }\n\n  /**\n   * A getter for the conversionDate property\n   *\n   * @returns The date at which the conversion rate was set. Expressed in milliseconds since midnight of\n   * January 1, 1970\n   *\n   */\n  getConversionDate() {\n    return this.state.conversionDate;\n  }\n  setConversionDate(conversionDate) {\n    this.update({\n      conversionDate\n    });\n  }\n}\n\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 700,\n  width: 450\n};\nconst POPUP_LOADED = \"popup_loaded\";\nconst POPUP_RESULT = \"popup_result\";\nconst SETUP_COMPLETE = \"setup_complete\";\nconst ACTIVITY_ACTION_ALL = \"walletActivity.allTransactions\";\nconst ACTIVITY_ACTION_SEND = \"walletActivity.send\";\nconst ACTIVITY_ACTION_BURN = \"walletActivity.burn\";\nconst ACTIVITY_ACTION_RECEIVE = \"walletActivity.receive\";\nconst ACTIVITY_ACTION_TOPUP = \"walletActivity.topup\";\nconst ACTIVITY_ACTION_CREATE_TRUSTLINE = \"walletActivity.createTrustline\";\nconst ACTIVITY_ACTION_REMOVE_TRUSTLINE = \"walletActivity.removeTrustline\";\nconst ACTIVITY_ACTION_CREATE_NFT_OFFER = \"walletActivity.createNftOffer\";\nconst ACTIVITY_ACTION_ACCEPT_NFT_OFFER = \"walletActivity.acceptNftOffer\";\nconst ACTIVITY_ACTION_CANCEL_NFT_OFFER = \"walletActivity.cancelNftOffer\";\nconst ACTIVITY_PERIOD_ALL = \"walletActivity.all\";\nconst ACTIVITY_PERIOD_WEEK_ONE = \"walletActivity.lastOneWeek\";\nconst ACTIVITY_PERIOD_MONTH_ONE = \"walletActivity.lastOneMonth\";\nconst ACTIVITY_PERIOD_MONTH_SIX = \"walletActivity.lastSixMonts\";\nconst ACTIVITY_STATUS_SUCCESSFUL = \"walletActivity.successful\";\nconst ACTIVITY_STATUS_UNSUCCESSFUL = \"walletActivity.unsuccessful\";\nconst ACTIVITY_STATUS_PENDING = \"walletActivity.pending\";\nconst ACTIVITY_STATUS_CANCELLED = \"walletActivity.cancelled\";\nconst ACTIVITY_STATUS_CANCELLING = \"walletActivity.cancelling\";\nconst COMMUNICATION_NOTIFICATIONS = {\n  IFRAME_STATUS: \"iframe_status\",\n  // Tell embed to close the window\n  CLOSE_WINDOW: \"close_window\",\n  USER_LOGGED_IN: \"user_logged_in\",\n  USER_LOGGED_OUT: \"user_logged_out\"\n};\nconst COMMUNICATION_JRPC_METHODS = {\n  LOGOUT: \"logout\",\n  WALLET_INSTANCE_ID: \"wallet_instance_id\",\n  USER_INFO: \"user_info\",\n  SET_PROVIDER: \"set_provider\",\n  TOPUP: \"topup\",\n  IFRAME_STATUS: \"iframe_status\",\n  // user has closed the window from embed's side\n  CLOSED_WINDOW: \"closed_window\",\n  WINDOW_BLOCKED: \"window_blocked\",\n  GET_PROVIDER_STATE: \"get_provider_state\",\n  LOGIN_WITH_PRIVATE_KEY: \"login_with_private_key\",\n  SHOW_WALLET_CONNECT: \"show_wallet_connect\",\n  SHOW_CHECKOUT: \"show_checkout\",\n  SHOW_WALLET_UI: \"show_wallet_ui\",\n  LOGIN_WITH_SESSION_ID: \"login_with_session_id\"\n};\nconst PROVIDER_JRPC_METHODS = {\n  GET_PROVIDER_STATE: \"wallet_get_provider_state\"\n};\nconst PROVIDER_NOTIFICATIONS = {\n  ACCOUNTS_CHANGED: \"wallet_accounts_changed\",\n  CHAIN_CHANGED: \"wallet_chain_changed\",\n  UNLOCK_STATE_CHANGED: \"wallet_unlock_state_changed\"\n};\nconst BROADCAST_CHANNELS = {\n  REDIRECT_CHANNEL: \"redirect_channel\",\n  PROVIDER_CHANGE_CHANNEL: \"torus_provider_change_channel\",\n  TRANSACTION_CHANNEL: \"torus_channel\",\n  MESSAGE_CHANNEL: \"torus_message_channel\",\n  WALLET_LOGOUT_CHANNEL: \"wallet_logout_channel\",\n  WALLET_SELECTED_ADDRESS_CHANNEL: \"wallet_selected_address_channel\",\n  WALLET_NETWORK_CHANGE_CHANNEL: \"wallet_network_change_channel\",\n  WALLET_ACCOUNT_IMPORT_CHANNEL: \"wallet_account_import_channel\",\n  THEME_CHANGE: \"theme_change_channel\",\n  TOP_UP_CHANNEL: \"top_up_channel\"\n};\nconst BROADCAST_CHANNELS_MSGS = {\n  LOGOUT: \"logout\",\n  ACCOUNT_IMPORTED: \"account_imported\",\n  SELECTED_ADDRESS_CHANGE: \"selected_address_change\",\n  NETWORK_CHANGE: \"network_change\",\n  SET_THEME: \"set_theme\"\n};\nlet ControllerEvents = /*#__PURE__*/function (ControllerEvents) {\n  ControllerEvents[\"UserUnauthorized\"] = \"user.unauthorized\";\n  return ControllerEvents;\n}({});\n\nfunction createChangeProviderMiddlewareMiddleware({\n  changeProvider\n}) {\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== COMMUNICATION_JRPC_METHODS.SET_PROVIDER) return next();\n    if (!changeProvider) throw new Error(\"CommunicationMiddleware - opts.changeProvider not provided\");\n    response.result = await changeProvider(request);\n  });\n}\nfunction createTopupMiddleware({\n  topup\n}) {\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== COMMUNICATION_JRPC_METHODS.TOPUP) return next();\n    if (!topup) throw new Error(\"CommunicationMiddleware - opts.topup not provided\");\n    response.result = await topup(request);\n  });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== targetMethod) return next();\n    if (!handler) throw new Error(`CommunicationMiddleware - ${targetMethod} not provided`);\n    const result = await handler(request);\n    if (!result) {\n      return next();\n    }\n    response.result = result;\n    return undefined;\n  });\n}\nfunction createCommunicationMiddleware(providerHandlers) {\n  const {\n    getUserInfo,\n    getWalletInstanceId,\n    topup,\n    logout,\n    changeProvider,\n    setIFrameStatus,\n    handleWindowRpc,\n    getProviderState,\n    loginWithPrivateKey,\n    showWalletConnect,\n    showCheckout,\n    showWalletUi,\n    showWindowBlockAlert,\n    loginWithSessionId\n  } = providerHandlers;\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.mergeMiddleware)([createChangeProviderMiddlewareMiddleware({\n    changeProvider\n  }), createTopupMiddleware({\n    topup\n  }), (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createScaffoldMiddleware)({\n    [COMMUNICATION_JRPC_METHODS.LOGOUT]: logout,\n    [COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID]: getWalletInstanceId,\n    [COMMUNICATION_JRPC_METHODS.USER_INFO]: getUserInfo,\n    [COMMUNICATION_JRPC_METHODS.IFRAME_STATUS]: setIFrameStatus,\n    // Do this in the orchestrator because communicationWindowManager needs to be passed into PopupHandlers\n    [COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW]: handleWindowRpc,\n    [COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE]: getProviderState,\n    [COMMUNICATION_JRPC_METHODS.SHOW_WALLET_CONNECT]: showWalletConnect,\n    [COMMUNICATION_JRPC_METHODS.SHOW_CHECKOUT]: showCheckout,\n    [COMMUNICATION_JRPC_METHODS.SHOW_WALLET_UI]: showWalletUi,\n    [COMMUNICATION_JRPC_METHODS.WINDOW_BLOCKED]: showWindowBlockAlert\n  }), createGenericJRPCMiddleware(COMMUNICATION_JRPC_METHODS.LOGIN_WITH_PRIVATE_KEY, loginWithPrivateKey), createGenericJRPCMiddleware(COMMUNICATION_JRPC_METHODS.LOGIN_WITH_SESSION_ID, loginWithSessionId)]);\n}\n\nclass BaseEmbedController extends BaseController {\n  constructor({\n    config = {},\n    state\n  }) {\n    super({\n      config,\n      state\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"_communicationProviderProxy\", void 0);\n    this.defaultState = {\n      isIFrameFullScreen: true,\n      oauthModalVisibility: false,\n      loginInProgress: false,\n      dappMetadata: {\n        name: \"\",\n        icon: \"\"\n      },\n      web3AuthClientId: \"\",\n      web3AuthNetwork: \"mainnet\",\n      whiteLabel: null,\n      confirmationStrategy: \"popup\"\n    };\n    this.initialize();\n  }\n\n  /**\n   * Called by orchestrator once while initializing the class\n   * @param handlers - JRPC handlers for provider\n   * @returns - provider - Returns the providerProxy\n   */\n  initializeProvider(handlers) {\n    const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.JRPCEngine();\n    const communicationMiddleware = createCommunicationMiddleware(handlers);\n    engine.push(communicationMiddleware);\n    const communicationProvider = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.providerFromEngine)(engine);\n    this.setCommunicationProvider(communicationProvider);\n  }\n  setCommunicationProvider(communicationProvider) {\n    if (this._communicationProviderProxy) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this._communicationProviderProxy.setTarget(communicationProvider);\n    } else {\n      this._communicationProviderProxy = createSwappableProxy(communicationProvider);\n    }\n  }\n}\n\nclass CommunicationWindowManager extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.SafeEventEmitter {\n  constructor(...args) {\n    super(...args);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleWindowRpc\", (request, response, next, end) => {\n      const {\n        method,\n        params\n      } = request;\n      if (method === COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW) {\n        const {\n          windowId\n        } = params;\n        // I've been informed that a window has been closed\n        this.emit(`${windowId}:closed`);\n        response.result = true;\n        end();\n      } else {\n        next();\n      }\n    });\n  }\n}\n\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst CONFIRMATION_STRATEGY = {\n  POPUP: \"popup\",\n  MODAL: \"modal\",\n  AUTO_APPROVE: \"auto-approve\",\n  DEFAULT: \"default\"\n};\n\n/**\n * State change callbacks\n */\n\n/**\n * Base controller configuration\n */\n\n/**\n * Base state representation\n */\n\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n  SMS_PASSWORDLESS: \"sms_passwordless\"\n};\n/**\n * {@label loginProviderType}\n */\n\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\n\nfunction omitBy(object, predicate) {\n  // Create a new object to store the results\n  const result = {};\n\n  // Iterate over all own properties of the object\n  for (const [key, value] of Object.entries(object)) {\n    if (!predicate(value, key)) {\n      result[key] = value;\n    }\n  }\n  return result;\n}\nfunction pickBy(object, predicate) {\n  // Create a new object to store the results\n  const result = {};\n  for (const [key, value] of Object.entries(object)) {\n    if (predicate(value, key)) {\n      result[key] = value;\n    }\n  }\n  return result;\n}\nfunction cloneDeep(object) {\n  try {\n    return structuredClone(object);\n  } catch (error) {\n    return JSON.parse(JSON.stringify(object));\n  }\n}\n\nconst authServer = \"https://authjs.web3auth.io\";\nconst signChallenge = async (payload, chainNamespace) => {\n  const t = chainNamespace === \"solana\" ? \"sip99\" : \"eip191\";\n  const header = {\n    t\n  };\n  const network = chainNamespace === \"solana\" ? \"solana\" : \"ethereum\";\n  const data = {\n    payload,\n    header,\n    network\n  };\n  const res = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${authServer}/siww/get`, data);\n  if (!res.success) {\n    throw new Error(\"Failed to authenticate user, Please reach out to Web3Auth Support team\");\n  }\n  return res.challenge;\n};\nconst verifySignedChallenge = async (chainNamespace, signedMessage, challenge, issuer, sessionTime, clientId, web3AuthNetwork, audience, additionalMetadata) => {\n  var _window$location;\n  const t = chainNamespace === \"solana\" ? \"sip99\" : \"eip191\";\n  const sigData = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n    signature: {\n      s: signedMessage,\n      t\n    },\n    message: challenge,\n    issuer,\n    audience: audience || (typeof window !== \"undefined\" ? ((_window$location = window.location) === null || _window$location === void 0 ? void 0 : _window$location.hostname) || \"com://reactnative\" : \"com://reactnative\"),\n    timeout: sessionTime\n  }, additionalMetadata || {});\n  const idTokenRes = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${authServer}/siww/verify`, sigData, {\n    headers: {\n      client_id: clientId,\n      wallet_provider: issuer,\n      web3auth_network: web3AuthNetwork\n    }\n  });\n  if (!idTokenRes.success) {\n    loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"Failed to authenticate user, ,message verification failed\", idTokenRes.error);\n    throw new Error(\"Failed to authenticate user, ,message verification failed\");\n  }\n  return idTokenRes.token;\n};\n\nconst getTxStatusText = txStatus => {\n  switch (txStatus) {\n    case \"rejected\":\n    case \"unapproved\":\n    case \"failed\":\n      return ACTIVITY_STATUS_UNSUCCESSFUL;\n    case \"confirmed\":\n      return ACTIVITY_STATUS_SUCCESSFUL;\n    case \"submitted\":\n      return ACTIVITY_STATUS_PENDING;\n    case \"cancelled\":\n      return ACTIVITY_STATUS_CANCELLED;\n    default:\n      return \"\";\n  }\n};\n\n/**\n * General utility functions\n */\n\nfunction intToHex(i) {\n  const hex = i.toString(16);\n  return `0x${hex}`;\n}\n\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */\nconst randomId = () => Math.random().toString(36).slice(2);\n\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\nfunction padWithZeroes(hexString, targetLength) {\n  if (hexString !== \"\" && !/^[a-f0-9]+$/iu.test(hexString)) {\n    throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);\n  }\n  if (targetLength < 0) {\n    throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);\n  }\n  return String.prototype.padStart.call(hexString, targetLength, \"0\");\n}\n/**\n * Concatenate an extended ECDSA signature into a hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature.\n */\nfunction concatSig(v, r, s) {\n  const rSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.fromSigned)(r);\n  const sSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.fromSigned)(s);\n  const vSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.bytesToBigInt)(v);\n  const rStr = padWithZeroes(Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.toUnsigned)(rSig)).toString(\"hex\"), 64);\n  const sStr = padWithZeroes(Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.toUnsigned)(sSig)).toString(\"hex\"), 64);\n  const vStr = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.stripHexPrefix)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.bigIntToHex)(vSig));\n  return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.addHexPrefix)(rStr.concat(sStr, vStr));\n}\nfunction timeout$1(duration) {\n  return new Promise(resolve => {\n    const timeoutRef = window.setTimeout(() => {\n      resolve();\n      window.clearTimeout(timeoutRef);\n    }, duration);\n  });\n}\nconst getHeaders = (jwt, publicAddress) => {\n  return {\n    headers: {\n      Authorization: `Bearer ${jwt}`,\n      \"Content-Type\": \"application/json; charset=utf-8\",\n      \"public-address\": publicAddress\n    }\n  };\n};\n\n/**\n * Text/number formatting utilities\n */\nconst formatSmallNumbers = (number, currency = \"usd\", noTilde = false) => {\n  const finalNumber = bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].isBigNumber(number) ? number.toNumber() : number;\n  if (!Number.isFinite(finalNumber)) return \"\";\n  const value = currency.toLowerCase() === \"usd\" ? parseFloat(Number(finalNumber).toFixed(2)) : parseFloat(Number(finalNumber).toFixed(5));\n  const tilde = value > 0 ? \"~ \" : \"\";\n  return `${currency.toLowerCase() === \"usd\" || noTilde ? \"\" : tilde}${Number(value)} ${currency.toUpperCase()}`;\n};\nconst addressSlicer = (address, sliceLength = 5) => {\n  if (!address) return \"\";\n  if (address.length < 11) {\n    return address;\n  }\n  if (typeof address !== \"string\") return \"\";\n  return `${address.slice(0, sliceLength)}...${address.slice(-sliceLength)}`;\n};\nconst significantDigits = (number, perc = false, length_ = 2) => {\n  let input = !bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].isBigNumber(number) ? new bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](number) : number;\n  if (input.isZero()) return input;\n  if (perc) {\n    input = input.times(new bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](100));\n  }\n  let depth;\n  if (input.gte(new bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](1))) {\n    depth = length_;\n  } else {\n    depth = length_ - 1 + Math.ceil(Math.log10(new bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](\"1\").div(input).toNumber()));\n  }\n  const shift = new bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](10).pow(new bignumber_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](depth));\n  const roundedNumber = Math.round(shift.times(input).toNumber()) / shift.toNumber();\n  return roundedNumber;\n};\nconst formatDate = inputDate => {\n  const monthList = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const date = new Date(inputDate);\n  const day = date.getDate();\n  const month = monthList[date.getMonth()];\n  const year = date.getFullYear();\n  return `${day} ${month} ${year}`;\n};\nconst formatTime = time => {\n  return new Date(time).toTimeString().slice(0, 8);\n};\n\n/**\n * Network utilities\n */\nconst transactionMatchesNetwork = (transaction, chainId) => {\n  if (typeof transaction.chainId !== \"undefined\") {\n    return transaction.chainId === chainId;\n  }\n  return false;\n};\n\n/**\n * Signing utils\n */\nconst hashMessage = message => {\n  const bufferedMessage = Buffer.from(message, \"utf8\");\n  const el = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.hashPersonalMessage)(bufferedMessage);\n  return Buffer.from(el);\n};\nconst signMessage = async (privateKey, data) => {\n  const privKey = Buffer.from(privateKey, \"hex\");\n  const message = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.stripHexPrefix)(data);\n  const msgSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.ecsign)(Buffer.from(message, \"hex\"), privKey);\n  const rawMsgSig = concatSig(Buffer.from((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_5__.bigIntToBytes)(msgSig.v)), Buffer.from(msgSig.r), Buffer.from(msgSig.s));\n  return rawMsgSig;\n};\n\n/**\n * popup handler utils\n */\nfunction getPopupFeatures({\n  width: w,\n  height: h\n}) {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\nconst broadcastChannelOptions = {\n  type: \"server\",\n  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n  webWorkerSupport: false // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\nfunction getCustomDeviceInfo() {\n  var _navigator;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if ((_navigator = navigator) !== null && _navigator !== void 0 && _navigator.brave) {\n    return {\n      browser: \"Brave\"\n    };\n  }\n}\nclass UserError extends Error {}\nconst handleRedirectParameters = (hash, queryParameters) => {\n  const hashParameters = {};\n  const hashUrl = new URL(`${window.location.origin}/?${hash.slice(1)}`);\n  hashUrl.searchParams.forEach((value, key) => {\n    hashParameters[key] = value;\n  });\n  let instanceParameters = {};\n  let error = \"\";\n  if (!queryParameters.windowId) {\n    if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n      instanceParameters = JSON.parse((0,_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_6__.safeatob)(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n      error = hashParameters.error_description || hashParameters.error || error;\n    } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n      instanceParameters = JSON.parse((0,_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_6__.safeatob)(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n      if (queryParameters.error) error = queryParameters.error;\n    }\n  }\n  return {\n    error,\n    instanceParameters,\n    hashParameters\n  };\n};\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\nconst isUnauthorizedError = error => {\n  return error instanceof Response && error.status === 401;\n};\n\nclass BaseKeyringController extends BaseController {\n  constructor({\n    config = {},\n    state\n  }) {\n    var _state$wallets;\n    super({\n      config,\n      state\n    });\n    this.defaultState = {\n      wallets: (_state$wallets = state.wallets) !== null && _state$wallets !== void 0 ? _state$wallets : []\n    };\n    this.initialize();\n  }\n\n  // for signing auth message\n  async signAuthMessage(address, message) {\n    const keyring = this.state.wallets.find(x => x.address === address);\n    if (!keyring) {\n      throw new Error(\"key does not exist\");\n    }\n    const hashedMessage = hashMessage(message).toString(\"hex\");\n    const rawMessageSig = await signMessage(keyring.privateKey, hashedMessage);\n    return rawMessageSig;\n  }\n}\n\nconst RETRIABLE_ERRORS = [\n// ignore server overload errors\n\"Gateway timeout\", \"ETIMEDOUT\",\n// ignore server sent html error pages\n// or truncated json responses\n\"failed to parse response body\",\n// ignore errors where http req failed to establish\n\"Failed to fetch\"];\nfunction checkForHttpErrors(fetchRes) {\n  // check for errors\n  switch (fetchRes.status) {\n    case 405:\n      throw _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.methodNotFound();\n    case 418:\n      throw _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.internal({\n        message: `Request is being rate limited.`,\n        data: {\n          cause: fetchRes\n        }\n      });\n    case 503:\n    case 504:\n      throw _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.internal({\n        message: `Gateway timeout. The request took too long to process.` + `This can happen when querying over too wide a block range.`\n      });\n  }\n}\nfunction timeout(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\nfunction parseResponse(fetchRes, body) {\n  // check for error code\n  if (fetchRes.status !== 200) {\n    throw _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.internal({\n      message: `Non-200 status code: '${fetchRes.status}'`,\n      data: body\n    });\n  }\n  // check for rpc error\n  if (body.error) {\n    throw _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.rpcErrors.internal({\n      data: body.error\n    });\n  }\n  // return successful result\n  return body.result;\n}\nfunction createFetchConfigFromReq({\n  req,\n  rpcTarget,\n  originHttpHeaderKey\n}) {\n  const parsedUrl = new URL(rpcTarget);\n\n  // prepare payload\n  // copy only canonical json rpc properties\n  const payload = {\n    id: req.id,\n    jsonrpc: req.jsonrpc,\n    method: req.method,\n    params: req.params\n  };\n\n  // extract 'origin' parameter from request\n  const originDomain = req.origin;\n\n  // serialize request body\n  const serializedPayload = JSON.stringify(payload);\n\n  // configure fetch params\n  const fetchParams = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: serializedPayload\n  };\n\n  // optional: add request origin as header\n  if (originHttpHeaderKey && originDomain) {\n    fetchParams.headers[originHttpHeaderKey] = originDomain;\n  }\n  return {\n    fetchUrl: parsedUrl.href,\n    fetchParams\n  };\n}\nfunction createFetchMiddleware({\n  rpcTarget,\n  originHttpHeaderKey\n}) {\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (req, res, _next) => {\n    const {\n      fetchUrl,\n      fetchParams\n    } = createFetchConfigFromReq({\n      req,\n      rpcTarget,\n      originHttpHeaderKey\n    });\n\n    // attempt request multiple times\n    const maxAttempts = 5;\n    const retryInterval = 1000;\n    for (let attempt = 0; attempt < maxAttempts; attempt++) {\n      try {\n        const fetchRes = await fetch(fetchUrl, fetchParams);\n        // check for http errrors\n        checkForHttpErrors(fetchRes);\n        // parse response body\n        const fetchBody = await fetchRes.json();\n        const result = parseResponse(fetchRes, fetchBody);\n        // set result and exit retry loop\n        res.result = result;\n        return;\n      } catch (err) {\n        const errMsg = (err.message || err).toString();\n        const isRetriable = RETRIABLE_ERRORS.some(phrase => errMsg.includes(phrase));\n        // re-throw error if not retriable\n        if (!isRetriable) {\n          throw err;\n        }\n      }\n      // delay before retrying\n      await timeout(retryInterval);\n    }\n  });\n}\n\nfunction deferredPromise() {\n  let resolve;\n  const promise = new Promise(_resolve => {\n    resolve = _resolve;\n  });\n  return {\n    resolve,\n    promise\n  };\n}\nfunction createInflightCacheMiddleware({\n  cacheIdentifierForRequest\n}) {\n  const inflightRequests = {};\n  async function createActiveRequestHandler(res, activeRequestHandlers) {\n    const {\n      resolve,\n      promise\n    } = deferredPromise();\n    activeRequestHandlers.push(handledRes => {\n      // append a copy of the result and error to the response\n      res.result = cloneDeep(handledRes.result);\n      res.error = cloneDeep(handledRes.error);\n      resolve();\n    });\n    return promise;\n  }\n  function handleActiveRequest(res, activeRequestHandlers) {\n    // use setTimeout so we can resolve our original request first\n    setTimeout(() => {\n      activeRequestHandlers.forEach(handler => {\n        try {\n          handler(res);\n        } catch (err) {\n          // catch error so all requests are handled correctly\n          loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(err);\n        }\n      });\n    });\n  }\n  return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_2__.createAsyncMiddleware)(async (req, res, next) => {\n    // allow cach to be skipped if so specified\n    if (req.skipCache) {\n      return next();\n    }\n    // get cacheId, if cacheable\n    const cacheId = cacheIdentifierForRequest(req);\n    // if not cacheable, skip\n    if (!cacheId) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"Request is not cacheable, proceeding. req = %o\", req);\n      return next();\n    }\n    // check for matching requests\n    let activeRequestHandlers = inflightRequests[cacheId];\n    // if found, wait for the active request to be handled\n    if (activeRequestHandlers) {\n      // setup the response listener and wait for it to be called\n      // it will handle copying the result and request fields\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"Running %i handler(s) for request %o\", activeRequestHandlers.length, req);\n      await createActiveRequestHandler(res, activeRequestHandlers);\n      return undefined;\n    }\n    // setup response handler array for subsequent requests\n    activeRequestHandlers = [];\n    inflightRequests[cacheId] = activeRequestHandlers;\n    // allow request to be handled normally\n    loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"Carrying original request forward %o\", req);\n    await next();\n    // clear inflight requests\n    delete inflightRequests[cacheId];\n    // schedule activeRequestHandlers to be handled\n    loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"Running %i collected handler(s) for request %o\", activeRequestHandlers.length, req);\n    handleActiveRequest(res, activeRequestHandlers);\n    // complete\n    return undefined;\n  });\n}\n\nfunction createLoggerMiddleware(options) {\n  return function loggerMiddleware(request, response, next) {\n    next(callback => {\n      if (response.error) {\n        loglevel__WEBPACK_IMPORTED_MODULE_4___default().warn(\"Error in RPC response:\\n\", response);\n      }\n      if (request.isTorusInternal) return;\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(`RPC (${options.origin}):`, request, \"->\", response);\n      callback();\n    });\n  };\n}\n\nfunction createOriginMiddleware(options) {\n  return function originMiddleware(request, _, next) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    request.origin = options.origin;\n    next();\n  };\n}\n\nconst createRandomId = () => Math.random().toString(36).substring(2);\nconst CHAIN_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  CASPER: \"casper\",\n  XRPL: \"xrpl\",\n  OTHER: \"other\"\n};\n// eip155 for all evm chains\n\n/**\n * Custom network properties\n * @example isEIP1559Compatible: true etc.\n */\n\n/**\n *\n */\n\nclass BroadcastChannelHandler {\n  constructor(channelPrefix, instanceId) {\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"bc\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"channel\", void 0);\n    const queryParameters = new URLSearchParams(window.location.search);\n    const windowId = queryParameters.get(\"windowId\");\n    this.channel = `${channelPrefix}_${instanceId}_${windowId}`;\n    this.bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(this.channel, broadcastChannelOptions);\n  }\n  getMessageFromChannel() {\n    return new Promise((resolve, reject) => {\n      this.bc.addEventListener(\"message\", async ev => {\n        this.bc.close();\n        if (ev.error) {\n          reject(ev.error);\n        } else {\n          resolve(ev.data);\n        }\n      });\n      this.bc.postMessage({\n        data: {\n          type: POPUP_LOADED\n        }\n      });\n    });\n  }\n}\n\nclass StreamWindow extends BaseController {\n  constructor({\n    config,\n    state = {}\n  }) {\n    super({\n      config,\n      state\n    });\n    // if window has been closed by users\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"closed\", false);\n    this.initialize();\n  }\n  async open() {\n    return new Promise((resolve, reject) => {\n      const {\n        communicationEngine,\n        communicationWindowManager\n      } = this.config;\n      let popupSuccess = false;\n      communicationWindowManager.once(`${this.state.windowId}:closed`, () => {\n        this.closed = true;\n      });\n\n      // Window is not open yet\n      if (!this.state.windowId) {\n        // since, we're opening window now, no need to tell window anything\n        this.update({\n          windowId: randomId()\n        });\n        if (typeof this.config.handleWindowBlockAlert !== \"function\") reject(new Error(\"handleWindowBlockAlert is not a function\"));\n        communicationWindowManager.once(`${this.state.windowId}:iframe-opened`, () => {\n          // this means iframe is full screen now\n          // there might be multiple block alerts at a time. so, we don't set iframe to close after handling this here\n          this.config.handleWindowBlockAlert({\n            windowId: this.state.windowId,\n            finalUrl: this.state.url.href\n          }).then(resolve).catch(reject);\n        });\n\n        // Tell the other party to maximize the iframe\n        communicationEngine.emit(\"notification\", {\n          method: COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS,\n          params: {\n            isFullScreen: true,\n            rid: this.state.windowId\n          }\n        });\n      } else {\n        // this is a pre-opened window. so, we need to tell it to redirect to correct url. it's currently waiting on /redirect and uses `RedirectHandler` code\n        // Send this window with `windowId` the url to open via bc\n        const channelName = `${BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${this.config.instanceId}_${this.state.windowId}`;\n        const bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(channelName, broadcastChannelOptions);\n        bc.addEventListener(\"message\", async ev => {\n          try {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(ev, `receiving data on channel: ${bc.name}`);\n            const {\n              error\n            } = ev;\n            if (error) {\n              // Popup says some error. so, we say it's not really opened\n              reject(new Error(error));\n              return;\n            }\n            const {\n              message\n            } = ev.data;\n            if (message === POPUP_LOADED) {\n              popupSuccess = true;\n              await bc.postMessage({\n                data: {\n                  url: this.state.url.href,\n                  message: \"\" // No need of a msg\n                }\n              });\n              resolve(this);\n              bc.close();\n            }\n          } catch (error) {\n            reject(error);\n            bc.close();\n            // Something went wrong. so, we close that window\n            this.close();\n          }\n        });\n\n        // We don't know if the other end is ready to receive this msg. So, we keep writing until it receives and sends back something\n        // we need backoff strategy\n        // we need to wait for first attempt to succeed/fail until the second attempt\n        // If we get 429, we need to wait for a while and then try again\n\n        const postMsg = async () => {\n          // this never throws\n          const localResponse = await bc.postMessage({\n            data: {\n              message: SETUP_COMPLETE\n            }\n          });\n          return localResponse;\n        };\n        let currentDelay = bc.type === \"server\" ? 1000 : 200;\n        const recursiveFn = async () => {\n          if (!popupSuccess && !this.closed) {\n            const localResponse = await postMsg();\n            if (bc.type === \"server\") {\n              const serverResponse = localResponse;\n              if (serverResponse.status >= 400) {\n                // We need to wait for a while and then try again\n                currentDelay = Math.round(currentDelay * 1.5);\n              }\n            }\n            await sleep(currentDelay);\n            await recursiveFn();\n          }\n        };\n        recursiveFn();\n      }\n    });\n  }\n  close() {\n    const {\n      communicationEngine\n    } = this.config;\n    communicationEngine.emit(\"notification\", {\n      method: COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW,\n      params: {\n        windowId: this.state.windowId\n      }\n    });\n  }\n}\n\n/*\nScenarios:\n1. Open a normal popup window and no communication with it - Use PopupHandler\n2. Open a popup window and communicate with it - Use PopupWithBcHandler (can initiate communication by waiting for window to open or not)\n\n3. If window is already opened, pass in windowId to the popup handler. \n   This will establish communication with the popup window and sends it a new url to redirect to\n\n\nIf you're trying to open a window and it gets blocked (happens if you're in iframe or delay b/w click and opening window),\n  StreamWindow is invoked and it writes in a channel to display a message to the user\n\nOnce user clicks on that modal/dialog, we pre-open the window and pass in the windowId (goes to 3)\n*/\n\n/**\n * Handles popup window management.\n * For broadcast channel communication, use url with `instanceId` coded into state parameter.\n * This state parameter will be passed across redirects according to OAuth spec.\n */\nclass PopupHandler extends BaseController {\n  constructor({\n    config,\n    state\n  }) {\n    super({\n      config,\n      state\n    });\n    // this.id = randomId()\n    // Add in dapp storage key to all popups as a hash parameter\n    this.defaultConfig = {\n      features: getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW),\n      target: \"_blank\",\n      communicationEngine: null,\n      communicationWindowManager: null,\n      timeout: 30000,\n      instanceId: \"\",\n      handleWindowBlockAlert: null\n    };\n    this.defaultState = {\n      windowTimer: null,\n      window: null,\n      iClosedWindow: false,\n      windowId: \"\",\n      url: state.url\n    };\n    this.initialize();\n    this._setupTimer();\n  }\n  async open() {\n    // if window is already open\n    const {\n      target,\n      features,\n      communicationEngine,\n      communicationWindowManager\n    } = this.config;\n    const {\n      windowId,\n      url\n    } = this.state;\n    // No window has been pre-opened\n    if (!windowId) {\n      // try to open a window first\n      let localWindow = window.open(url.href, target, features);\n      let finalWindowId = \"\";\n      if (!localWindow) {\n        // if it's blocked, open StreamWindow\n        const streamWindow = new StreamWindow({\n          config: {\n            communicationEngine,\n            communicationWindowManager,\n            instanceId: this.config.instanceId,\n            handleWindowBlockAlert: this.config.handleWindowBlockAlert\n          },\n          state: {\n            url\n          }\n        });\n        streamWindow.open();\n        finalWindowId = streamWindow.state.windowId;\n        localWindow = streamWindow;\n      }\n      this.update({\n        window: localWindow,\n        windowId: finalWindowId || randomId()\n      });\n      return;\n    }\n    // A window has been pre-opened with a query parameter `windowId`\n    const localWindow = new StreamWindow({\n      config: {\n        communicationEngine,\n        communicationWindowManager,\n        instanceId: this.config.instanceId,\n        handleWindowBlockAlert: this.config.handleWindowBlockAlert\n      },\n      state: {\n        url,\n        windowId\n      }\n    });\n    this.update({\n      window: localWindow,\n      windowId: localWindow.state.windowId\n    });\n    await localWindow.open();\n  }\n  close() {\n    this.update({\n      iClosedWindow: true\n    });\n    const {\n      window\n    } = this.state;\n    if (window) window.close();\n  }\n  _setupTimer() {\n    const timer = window.setInterval(() => {\n      const {\n        window,\n        windowTimer,\n        iClosedWindow\n      } = this.state;\n      if (window && window.closed) {\n        if (windowTimer) clearInterval(windowTimer);\n        setTimeout(() => {\n          if (!iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.update({\n            iClosedWindow: false,\n            window: null\n          });\n        }, this.config.timeout);\n      }\n      if (window === null && windowTimer) clearInterval(windowTimer);\n    }, 500);\n    this.update({\n      windowTimer: timer\n    });\n  }\n}\n\n// Always listening channels. Hence, no window id\nclass PopupStoreChannel {\n  constructor({\n    instanceId,\n    handleLogout,\n    handleAccountImport,\n    handleNetworkChange,\n    handleSelectedAddressChange,\n    handleThemeChange\n  }) {\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleLogout\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleAccountImport\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleNetworkChange\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleThemeChange\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"handleSelectedAddressChange\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"instanceId\", void 0);\n    this.instanceId = instanceId;\n    this.handleLogout = handleLogout;\n    this.handleAccountImport = handleAccountImport;\n    this.handleNetworkChange = handleNetworkChange;\n    this.handleSelectedAddressChange = handleSelectedAddressChange;\n    this.handleThemeChange = handleThemeChange;\n  }\n  setupStoreChannels() {\n    this.logoutChannel();\n    this.importAccountChannel();\n    this.networkChangeChannel();\n    this.selectedAddressChangeChannel();\n    this.themeChangedChannel();\n  }\n  logoutChannel() {\n    const logoutChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_LOGOUT_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n    logoutChannel.addEventListener(\"message\", ev => {\n      var _ev$data;\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"received logout message\", ev);\n      if (!ev.error && ((_ev$data = ev.data) === null || _ev$data === void 0 ? void 0 : _ev$data.type) === BROADCAST_CHANNELS_MSGS.LOGOUT) {\n        loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"Logging Out\");\n        this.handleLogout();\n      }\n    });\n  }\n  importAccountChannel() {\n    const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_ACCOUNT_IMPORT_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data2;\n      if (!ev.error && ((_ev$data2 = ev.data) === null || _ev$data2 === void 0 ? void 0 : _ev$data2.type) === BROADCAST_CHANNELS_MSGS.ACCOUNT_IMPORTED) {\n        var _ev$data3;\n        this.handleAccountImport((_ev$data3 = ev.data) === null || _ev$data3 === void 0 ? void 0 : _ev$data3.privKey);\n      }\n    });\n  }\n  networkChangeChannel() {\n    const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_NETWORK_CHANGE_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data4;\n      if (!ev.error && ((_ev$data4 = ev.data) === null || _ev$data4 === void 0 ? void 0 : _ev$data4.type) === BROADCAST_CHANNELS_MSGS.NETWORK_CHANGE) {\n        var _ev$data5;\n        this.handleNetworkChange((_ev$data5 = ev.data) === null || _ev$data5 === void 0 ? void 0 : _ev$data5.network);\n      }\n    });\n  }\n  themeChangedChannel() {\n    const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.THEME_CHANGE}_${this.instanceId}`, broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data6;\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().info({\n        ev\n      });\n      if (!ev.error && ((_ev$data6 = ev.data) === null || _ev$data6 === void 0 ? void 0 : _ev$data6.type) === BROADCAST_CHANNELS_MSGS.SET_THEME) {\n        var _ev$data7;\n        this.handleThemeChange((_ev$data7 = ev.data) === null || _ev$data7 === void 0 ? void 0 : _ev$data7.theme);\n      }\n    });\n  }\n  selectedAddressChangeChannel() {\n    const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_SELECTED_ADDRESS_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data8;\n      if (!ev.error && ((_ev$data8 = ev.data) === null || _ev$data8 === void 0 ? void 0 : _ev$data8.type) === BROADCAST_CHANNELS_MSGS.SELECTED_ADDRESS_CHANGE) {\n        var _ev$data9;\n        this.handleSelectedAddressChange((_ev$data9 = ev.data) === null || _ev$data9 === void 0 ? void 0 : _ev$data9.selectedAddress);\n      }\n    });\n  }\n}\n\n/**\n * PopupWithBcHandler is a PopupHandler which uses broadcast channel to communicate with the popup window.\n */\nclass PopupWithBcHandler extends PopupHandler {\n  constructor({\n    config,\n    state,\n    channelPrefix\n  }) {\n    super({\n      config,\n      state\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"channelPrefix\", void 0);\n    this.channelPrefix = channelPrefix;\n  }\n\n  /**\n   * Receives the data from popup window and closes the window\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */\n  handle(successExtraFn) {\n    const channelName = `${this.channelPrefix}_${this.config.instanceId}_${this.state.windowId}`;\n    const bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(channelName, broadcastChannelOptions);\n    return new Promise((resolve, reject) => {\n      const closeListener = () => {\n        bc.close();\n        reject(new UserError(\"user closed popup\"));\n        this.removeListener(\"close\", closeListener);\n      };\n      this.on(\"close\", closeListener);\n      bc.addEventListener(\"message\", async ev => {\n        loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(ev, `receiving data on channel: ${bc.name}`);\n        try {\n          const {\n            error,\n            data\n          } = ev;\n          if (error) {\n            reject(new Error(error));\n            return;\n          }\n          if (successExtraFn) await successExtraFn.call(this, data);\n          resolve(data);\n        } catch (error) {\n          reject(error);\n        } finally {\n          bc.close();\n          this.close();\n        }\n      });\n      this.open().then(() => {\n        loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(`opened window ${bc.name}`);\n        // Opened window. yay.  let the bc events do their job\n        return undefined;\n      }).catch(err => {\n        loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(err, \"something went wrong while opening window\");\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Use this if we have to send large payloads which don't fit in query/hash params.\n   * Waits for ack that popup window is ready to receive data.\n   * Receives the data from popup window and closes the window\n   * @param payload - The data to be sent to the popup window once we have ack that window is ready to receive data\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */\n  handleWithHandshake(payload, successExtraFn) {\n    const channelName = `${this.channelPrefix}_${this.config.instanceId}_${this.state.windowId}`;\n    const bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(channelName, broadcastChannelOptions);\n    return new Promise((resolve, reject) => {\n      const closeListener = () => {\n        bc.close();\n        reject(new UserError(\"user closed popup\"));\n        this.removeListener(\"close\", closeListener);\n      };\n      this.on(\"close\", closeListener);\n      bc.addEventListener(\"message\", async ev => {\n        try {\n          loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(ev, `receiving data on channel: ${bc.name}`);\n          const {\n            error,\n            data\n          } = ev;\n          if (error) {\n            reject(new Error(error));\n            return;\n          }\n          // Do handshake\n          const {\n            type = \"\"\n          } = data;\n          if (type === POPUP_LOADED) {\n            // Hack with generic to use the same type for both send and receive\n            await bc.postMessage({\n              data: payload\n            });\n          } else if (type === POPUP_RESULT) {\n            if (successExtraFn) await successExtraFn.call(this, data);\n            resolve(data);\n            // Must only close the bc after result is done\n            bc.close();\n            this.close();\n          }\n        } catch (error) {\n          reject(error);\n          bc.close();\n          this.close();\n        }\n      });\n      this.open().then(() => {\n        loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(`opened window ${bc.name}`);\n        // Opened window. yay.  let the bc events do their job\n        return undefined;\n      }).catch(err => {\n        loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(err, \"something went wrong while opening window\");\n        reject(err);\n      });\n    });\n  }\n}\n\nclass RedirectHandler {\n  // private hashParameters: Record<string, string>;\n\n  constructor(instanceId) {\n    // private error: string;\n    // this is sessionid post login\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"instanceId\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"finalQueryParams\", {});\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"instanceParameters\", void 0);\n    const {\n      hash\n    } = window.location;\n    const queryParameters = new URLSearchParams(window.location.search);\n    queryParameters.forEach((value, key) => {\n      this.finalQueryParams[key] = value;\n    });\n    const {\n      instanceParameters\n    } = handleRedirectParameters(hash, this.finalQueryParams);\n    // this.error = error;\n    this.instanceParameters = instanceParameters;\n    // this.hashParameters = hashParameters;\n    this.instanceId = instanceId;\n  }\n  async handle() {\n    return new Promise((resolve, reject) => {\n      const {\n        finalQueryParams,\n        instanceParameters\n      } = this;\n      let bc;\n      try {\n        // used for login case. there's no windowId here\n        // if (!finalQueryParams.windowId) {\n        //   bc = new BroadcastChannel(`${BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${instanceParameters.instanceId}`, broadcastChannelOptions);\n        //   bc.addEventListener(\"message\", async (ev) => {\n        //     if (ev.error) {\n        //       reject(ev.error);\n        //       window.close();\n        //     } else {\n        //       resolve();\n        //       bc.close();\n        //       log.info(\"posted\", { finalQueryParams, hashParameters, instanceParameters });\n        //     }\n        //   });\n        //   bc.postMessage({\n        //     data: {\n        //       instanceParams: instanceParameters,\n        //       hashParams: hashParameters,\n        //       queryParams: finalQueryParams,\n        //     },\n        //     error,\n        //   });\n\n        //   setTimeout(() => {\n        //     resolve();\n        //     window.location.href = window.location.origin + window.location.search + window.location.hash;\n        //   }, 5000);\n        // } else {\n        const channelName = `${BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${this.instanceId || instanceParameters.instanceId}_${finalQueryParams.windowId || instanceParameters.windowId}`;\n        bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_10__.BroadcastChannel(channelName, broadcastChannelOptions);\n        bc.addEventListener(\"message\", async ev => {\n          const {\n            url,\n            message\n          } = ev.data;\n          if (url) {\n            resolve();\n            window.location.href = url;\n          } else if (message === SETUP_COMPLETE) {\n            await bc.postMessage({\n              data: {\n                windowId: finalQueryParams.windowId,\n                message: POPUP_LOADED\n              }\n            });\n          }\n          if (ev.error && ev.error !== \"\") {\n            loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(ev.error);\n            resolve();\n            bc.close();\n          }\n        });\n        // }\n      } catch (err) {\n        loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(err, \"something went wrong\");\n        reject(err);\n        if (bc) bc.close();\n        window.close();\n      }\n    });\n  }\n}\n\nvar HTTP_METHOD = /*#__PURE__*/function (HTTP_METHOD) {\n  HTTP_METHOD[HTTP_METHOD[\"GET\"] = 0] = \"GET\";\n  HTTP_METHOD[HTTP_METHOD[\"POST\"] = 1] = \"POST\";\n  HTTP_METHOD[HTTP_METHOD[\"PUT\"] = 2] = \"PUT\";\n  HTTP_METHOD[HTTP_METHOD[\"PATCH\"] = 3] = \"PATCH\";\n  HTTP_METHOD[HTTP_METHOD[\"DELETE\"] = 4] = \"DELETE\";\n  return HTTP_METHOD;\n}(HTTP_METHOD || {});\nconst constructAuthHeaders = ({\n  jwtToken,\n  publicAddress\n}) => {\n  return {\n    headers: {\n      Authorization: `Bearer ${jwtToken}`,\n      \"public-address\": publicAddress\n    }\n  };\n};\nconst withUnauthorizedHandler = async (fn, emitter) => {\n  try {\n    const response = await fn();\n    return response;\n  } catch (e) {\n    if (isUnauthorizedError(e)) {\n      emitter.emit(ControllerEvents.UserUnauthorized);\n    }\n    throw e;\n  }\n};\nconst jwtTokenExpired = jwt => {\n  const decoded = (0,jwt_decode__WEBPACK_IMPORTED_MODULE_9__.jwtDecode)(jwt);\n  const jwtExpiry = decoded.exp * 1000;\n  const currentTime = new Date().getTime();\n  return currentTime >= jwtExpiry;\n};\nconst WSApiClient = (baseApiUrl, emitter) => {\n  const authRequest = (method, url, data, authCredentials, customOptions) => {\n    if (jwtTokenExpired(authCredentials.jwtToken)) {\n      emitter.emit(ControllerEvents.UserUnauthorized);\n      // eslint-disable-next-line @typescript-eslint/no-throw-literal\n      throw new Response(null, {\n        status: 401,\n        statusText: \"Unauthorized\"\n      });\n    }\n    const headers = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }, constructAuthHeaders(authCredentials));\n    if (method === HTTP_METHOD.GET) {\n      return withUnauthorizedHandler(() => (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.get)(url, headers, customOptions), emitter);\n    }\n    if (method === HTTP_METHOD.POST) {\n      return withUnauthorizedHandler(() => (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(url, data, headers, customOptions), emitter);\n    }\n    if (method === HTTP_METHOD.PUT) {\n      return withUnauthorizedHandler(() => (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.put)(url, data, headers, customOptions), emitter);\n    }\n    if (method === HTTP_METHOD.PATCH) {\n      return withUnauthorizedHandler(() => (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.patch)(url, data, headers, customOptions), emitter);\n    }\n    if (method === HTTP_METHOD.DELETE) {\n      return withUnauthorizedHandler(() => (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.remove)(url, data, headers, customOptions), emitter);\n    }\n  };\n  return {\n    authGet: (url, authCredentials, customOptions) => authRequest(HTTP_METHOD.GET, `${baseApiUrl}/${url}`, {}, authCredentials, customOptions),\n    authPost: (url, data, authCredentials, customOptions) => authRequest(HTTP_METHOD.POST, `${baseApiUrl}/${url}`, data, authCredentials, customOptions),\n    authPut: (url, data, authCredentials, customOptions) => authRequest(HTTP_METHOD.PUT, `${baseApiUrl}/${url}`, data, authCredentials, customOptions),\n    authPatch: (url, data, authCredentials, customOptions) => authRequest(HTTP_METHOD.PATCH, `${baseApiUrl}/${url}`, data, authCredentials, customOptions),\n    authRemove: (url, data, authCredentials, customOptions) => authRequest(HTTP_METHOD.DELETE, `${baseApiUrl}/${url}`, data, authCredentials, customOptions)\n  };\n};\n\nconst ACTIVITY_ACTION = {\n  ACTIVITY_ACTION_ALL: \"walletActivity.allTransactions\",\n  ACTIVITY_ACTION_SEND: \"walletActivity.send\",\n  ACTIVITY_ACTION_RECEIVE: \"walletActivity.receive\",\n  ACTIVITY_ACTION_TOPUP: \"walletActivity.topup\"\n};\nconst ACCOUNT_CATEGORY = {\n  NORMAL: \"normal\",\n  THRESHOLD: \"threshold\",\n  IMPORTED: \"imported\",\n  // we have private key here\n  APP_SCOPED: \"app_scoped\",\n  ACCOUNT_ABSTRACTION: \"account_abstraction\",\n  EXTERNAL: \"external\",\n  // like metamask, wallet connect\n  MPC: \"mpc\",\n  SFA: \"sfa\"\n};\n\n/**\n * Preferences controller state\n */\n\n/**\n * @param address - address of the user\n * @param jwtToken - if jwt token already exists, it will be used instead of fetching from backend\n * @param calledFromEmbed - if called from embed\n * @param userInfo - optional user info\n * @param rehydrate - Rehydrate the preferences from the local storage\n */\n\n// By default, poll every 3 minutes\nconst DEFAULT_INTERVAL = 180 * 1000;\nconst DEFAULT_PREFERENCES = {\n  selectedCurrency: \"USD\",\n  theme: \"dark\",\n  locale: \"en\",\n  accountType: ACCOUNT_CATEGORY.NORMAL,\n  contacts: [],\n  jwtToken: \"\",\n  fetchedPastTx: [],\n  pastTransactions: [],\n  paymentTx: [],\n  defaultPublicAddress: \"\",\n  customTokens: [],\n  customNfts: [],\n  crashReport: true,\n  userInfo: {\n    aggregateVerifier: \"\",\n    email: \"\",\n    name: \"\",\n    profileImage: \"\",\n    typeOfLogin: LOGIN_PROVIDER.GOOGLE,\n    verifier: \"\",\n    verifierId: \"\"\n  }\n};\n\n/**\n * Controller that stores shared settings and exposes convenience methods\n */\nclass BasePreferencesController extends BaseController {\n  /**\n   * Creates a PreferencesController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor({\n    config,\n    state,\n    defaultPreferences,\n    signAuthMessage,\n    validateSignMessage\n  }) {\n    super({\n      config,\n      state\n    });\n    /**\n     * Name of this controller used during composition\n     */\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"name\", \"PreferencesController\");\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"iframeOrigin\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"wsApiClient\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"signAuthMessage\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"validateSignMessage\", void 0);\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"defaultPreferences\", void 0);\n    if (!config.api) {\n      throw new Error(\"PreferencesController - no api specified in config.\");\n    }\n    this.defaultState = {\n      identities: {},\n      selectedAddress: \"\",\n      lastErrorMessage: \"\",\n      lastSuccessMessage: \"\"\n    };\n    this.defaultConfig = {\n      api: config.api,\n      pollInterval: DEFAULT_INTERVAL\n    };\n    this.initialize();\n    this.defaultPreferences = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, DEFAULT_PREFERENCES), defaultPreferences);\n    this.signAuthMessage = signAuthMessage;\n    this.validateSignMessage = validateSignMessage;\n    this.wsApiClient = WSApiClient(this.config.api, this);\n  }\n  setIframeOrigin(origin) {\n    this.iframeOrigin = origin;\n  }\n  getAddressState(address) {\n    const selectedAddress = address || this.state.selectedAddress;\n    return this.state.identities[selectedAddress];\n  }\n\n  /**\n   * Sets selected address\n   *\n   * @param selectedAddress - casper account hash\n   */\n  setSelectedAddress(selectedAddress) {\n    this.update({\n      selectedAddress\n    });\n  }\n  async getUser(address) {\n    const user = await this.wsApiClient.authGet(\"user?fetchTx=false\", this.authCredentials(address), {\n      useAPIKey: true\n    });\n    return user.data;\n  }\n  async createUser(params) {\n    const {\n      selectedCurrency,\n      theme,\n      verifier,\n      verifierId,\n      locale,\n      address,\n      idToken,\n      type,\n      web3AuthNetwork\n    } = params;\n    const userPayload = {\n      default_currency: selectedCurrency,\n      theme,\n      verifier,\n      verifier_id: verifierId,\n      locale,\n      idToken,\n      account_type: type,\n      web3auth_network: web3AuthNetwork\n    };\n    await this.wsApiClient.authPost(\"user\", userPayload, this.authCredentials(address), {\n      useAPIKey: true\n    });\n    this.updateState({\n      theme,\n      defaultPublicAddress: address,\n      selectedCurrency,\n      locale,\n      accountType: type\n    }, address);\n  }\n  async storeUserLogin(params) {\n    const {\n      verifierId,\n      verifier,\n      options,\n      address,\n      idToken,\n      web3AuthClientId,\n      web3AuthNetwork,\n      sessionPubKey,\n      loginMode\n    } = params;\n    if (!options.rehydrate) {\n      const browser = bowser__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getParser(window.navigator.userAgent);\n      const specialBrowser = getCustomDeviceInfo();\n      const recordLoginPayload = {\n        os: browser.getOSName(),\n        os_version: browser.getOSVersion() || \"unidentified\",\n        browser: (specialBrowser === null || specialBrowser === void 0 ? void 0 : specialBrowser.browser) || browser.getBrowserName() || \"unidentified\",\n        browser_version: browser.getBrowserVersion() || \"unidentified\",\n        platform: browser.getPlatform().type || \"desktop\",\n        hostname: this.iframeOrigin,\n        verifier,\n        verifier_id: verifierId,\n        idToken,\n        web3auth_client_id: web3AuthClientId,\n        web3auth_network: web3AuthNetwork,\n        session_pub_key: sessionPubKey,\n        login_mode: loginMode\n      };\n      await this.wsApiClient.authPost(\"user/recordLogin\", recordLoginPayload, this.authCredentials(address), {\n        useAPIKey: true\n      });\n    }\n  }\n  async setCrashReport(isEnabled) {\n    var _this$getAddressState;\n    if (isEnabled === ((_this$getAddressState = this.getAddressState()) === null || _this$getAddressState === void 0 ? void 0 : _this$getAddressState.crashReport)) return true;\n    try {\n      await this.wsApiClient.authPatch(\"user\", {\n        enable_crash_reporter: isEnabled\n      }, this.authCredentials(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        crashReport: isEnabled\n      });\n      return true;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(error);\n      return false;\n    }\n  }\n  async setUserTheme(theme) {\n    var _this$getAddressState2;\n    if (theme === ((_this$getAddressState2 = this.getAddressState()) === null || _this$getAddressState2 === void 0 ? void 0 : _this$getAddressState2.theme)) return true;\n    try {\n      await this.wsApiClient.authPatch(\"user\", {\n        theme\n      }, this.authCredentials(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        theme\n      });\n      return true;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(error);\n      return false;\n    }\n  }\n  async setUserLocale(locale) {\n    var _this$getAddressState3;\n    if (locale === ((_this$getAddressState3 = this.getAddressState()) === null || _this$getAddressState3 === void 0 ? void 0 : _this$getAddressState3.locale)) return;\n    try {\n      await this.wsApiClient.authPatch(\"user\", {\n        locale\n      }, this.authCredentials(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        locale\n      });\n      return true;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to set locale\", error);\n      return false;\n    }\n  }\n  async setSelectedCurrency(payload) {\n    var _this$getAddressState4;\n    if (payload.selectedCurrency === ((_this$getAddressState4 = this.getAddressState()) === null || _this$getAddressState4 === void 0 ? void 0 : _this$getAddressState4.selectedCurrency)) return true;\n    try {\n      await this.wsApiClient.authPatch(\"user\", {\n        default_currency: payload.selectedCurrency\n      }, this.authCredentials(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        selectedCurrency: payload.selectedCurrency\n      });\n      return true;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(error);\n      return false;\n    }\n  }\n  async addContact(contact) {\n    try {\n      var _this$getAddressState5;\n      const response = await this.wsApiClient.authPost(\"contact\", contact, this.authCredentials(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        contacts: [...(((_this$getAddressState5 = this.getAddressState()) === null || _this$getAddressState5 === void 0 ? void 0 : _this$getAddressState5.contacts) || []), response.data]\n      });\n      return true;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to add contact\", error);\n      return false;\n    }\n  }\n  async deleteContact(contactId) {\n    try {\n      var _this$getAddressState6;\n      const response = await this.wsApiClient.authRemove(`contact/${contactId}`, {}, this.authCredentials(), {\n        useAPIKey: true\n      });\n      const finalContacts = (_this$getAddressState6 = this.getAddressState()) === null || _this$getAddressState6 === void 0 ? void 0 : _this$getAddressState6.contacts.filter(contact => contact.id !== response.data.id);\n      if (finalContacts) this.updateState({\n        contacts: [...finalContacts]\n      });\n      return true;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to delete contact\", error);\n      return false;\n    }\n  }\n  async revokeDiscord(idToken) {\n    try {\n      const resp = await this.wsApiClient.authPost(\"revoke/discord\", {\n        token: idToken\n      }, this.authCredentials(), {\n        useAPIKey: true\n      });\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(resp);\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(error);\n    }\n  }\n  async patchPastTx(body, address) {\n    try {\n      const response = await this.wsApiClient.authPatch(\"transaction\", body, this.authCredentials(address), {\n        useAPIKey: true\n      });\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"successfully patched\", response);\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to patch tx\", error);\n    }\n  }\n  async postPastTx(tx, address) {\n    try {\n      const response = await this.wsApiClient.authPost(\"transaction\", tx, this.authCredentials(address), {\n        useAPIKey: true\n      });\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().info(\"successfully posted tx\", response);\n      return response;\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(error, \"unable to insert transaction\");\n    }\n  }\n  async getWalletOrders(address) {\n    try {\n      const response = await this.wsApiClient.authGet(\"transaction\", this.authCredentials(address), {\n        useAPIKey: true\n      });\n      return response.success ? response.data ? response.data : [] : [];\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to get wallet orders tx\", error);\n      return [];\n    }\n  }\n  async getTopUpOrders(address) {\n    try {\n      const response = await this.wsApiClient.authGet(\"transaction\", this.authCredentials(address), {\n        useAPIKey: true\n      });\n      return response.data || [];\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to fetch past Top up orders\", error);\n    }\n  }\n  async getBillBoardData() {\n    try {\n      const response = await this.wsApiClient.authGet(\"billboard\", this.authCredentials(), {\n        useAPIKey: true\n      });\n      return response.success ? response.data : [];\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to get billboard data\", error);\n      return [];\n    }\n  }\n  async getMessageForSigning(publicAddress, web3AuthIdToken) {\n    const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${this.config.api}/auth/message`, {\n      public_address: publicAddress,\n      id_token: web3AuthIdToken\n    }, {}, {\n      useAPIKey: true\n    });\n    return response.message;\n  }\n  async getTwitterId(payload) {\n    const res = await this.wsApiClient.authGet(`twitter?screen_name=${payload.nick}`, this.authCredentials(), {\n      useAPIKey: true\n    });\n    return `${payload.typeOfLogin.toLowerCase()}|${res.data.toString()}`;\n  }\n  async sendEmail(payload) {\n    return this.wsApiClient.authPost(\"transaction/sendemail\", payload.emailObject, this.authCredentials(), {\n      useAPIKey: true\n    });\n  }\n  async refreshJwt() {\n    const address = this.state.selectedAddress;\n    const messageToSign = await this.getMessageForSigning(address);\n    await this.validateSignMessage(messageToSign);\n    const signedMessage = await this.signAuthMessage(address, messageToSign);\n    const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${this.config.api}/auth/verify`, {\n      challenge: messageToSign,\n      public_address: address,\n      signed_message: signedMessage\n    }, {}, {\n      useAPIKey: true\n    });\n    this.updateState({\n      jwtToken: response.token\n    }, address);\n  }\n  async getDappList() {\n    try {\n      const response = await this.wsApiClient.authGet(\"dapps\", this.authCredentials(), {\n        useAPIKey: true\n      });\n      return response.success ? response.data : [];\n    } catch (error) {\n      loglevel__WEBPACK_IMPORTED_MODULE_4___default().error(\"unable to get dapps list\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Strategy\n   * For account type: threshold, normal (web3auth login)\n   * idToken from web3auth login must be present. We use it directly\n   *\n   * For account type: app_scoped, IMPORTED\n   * idToken from web3auth login must be present. We request a message for signing using the idToken\n   * and sign it using the private key of the account. We then send the signed message to the backend\n   * to verify the signature and return a new jwtToken that includes the app_scoped address\n   *\n   * For account type: Account abstraction\n   * idToken from web3auth login must be present. We use it to exchange for a new jwtToken.\n   * Because backend can derive AA address from public address and issue this token easily.\n   *\n   * For account type: external\n   * idToken from web3auth `authenticateUser` (siww) login must be present. We use it directly\n   */\n  async init(params) {\n    const {\n      address,\n      userInfo,\n      idToken,\n      metadata = {},\n      type\n    } = params;\n    if (this.getAddressState(address)) return;\n    let jwtToken;\n    switch (type) {\n      case ACCOUNT_CATEGORY.IMPORTED:\n        {\n          if (!idToken) throw new Error(\"Web3Auth idToken must be present\");\n          const messageToSign = await this.getMessageForSigning(address, idToken);\n          await this.validateSignMessage(messageToSign);\n          const signedMessage = await this.signAuthMessage(address, messageToSign);\n          const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${this.config.api}/auth/verify`, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n            challenge: messageToSign,\n            account_type: type,\n            public_address: address,\n            signed_message: signedMessage,\n            verifier: userInfo.aggregateVerifier || userInfo.verifier,\n            verifier_id: userInfo.verifierId\n          }, metadata), {}, {\n            useAPIKey: true\n          });\n          jwtToken = response.token;\n          break;\n        }\n      case ACCOUNT_CATEGORY.EXTERNAL:\n        {\n          if (!idToken) throw new Error(\"SIWW idToken must be present\");\n          const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${this.config.api}/auth/verify`, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n            account_type: type,\n            public_address: address,\n            id_token: idToken,\n            verifier: userInfo.aggregateVerifier || userInfo.verifier,\n            verifier_id: userInfo.verifierId\n          }, metadata), {}, {\n            useAPIKey: true\n          });\n          jwtToken = response.token;\n          break;\n        }\n      case ACCOUNT_CATEGORY.ACCOUNT_ABSTRACTION:\n        {\n          if (!idToken) throw new Error(\"Web3Auth idToken must be present\");\n          const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${this.config.api}/auth/verify`, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n            public_address: address,\n            id_token: idToken,\n            verifier: userInfo.aggregateVerifier || userInfo.verifier,\n            verifier_id: userInfo.verifierId,\n            account_type: type\n          }, metadata), {}, {\n            useAPIKey: true\n          });\n          jwtToken = response.token;\n          break;\n        }\n      case ACCOUNT_CATEGORY.MPC:\n      case ACCOUNT_CATEGORY.SFA:\n        {\n          if (!metadata.signatures) throw new Error(\"MPC signatures must be present\");\n          const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.post)(`${this.config.api}/auth/verify`, _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({\n            public_address: address,\n            verifier: userInfo.aggregateVerifier || userInfo.verifier,\n            verifier_id: userInfo.verifierId,\n            account_type: type\n          }, metadata), {}, {\n            useAPIKey: true\n          });\n          jwtToken = response.token;\n          break;\n        }\n      case ACCOUNT_CATEGORY.NORMAL:\n      case ACCOUNT_CATEGORY.THRESHOLD:\n      case ACCOUNT_CATEGORY.APP_SCOPED:\n      default:\n        if (!idToken) throw new Error(\"Web3Auth idToken must be present\");\n        jwtToken = idToken;\n        break;\n    }\n    this.updateState({\n      jwtToken,\n      userInfo,\n      accountType: type !== null && type !== void 0 ? type : this.defaultPreferences.accountType\n    }, address);\n  }\n  updateState(preferences, address) {\n    const selectedAddress = address || this.state.selectedAddress;\n    const currentState = this.getAddressState(selectedAddress) || cloneDeep(this.defaultPreferences);\n    const mergedState = _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, currentState), preferences);\n    this.update({\n      identities: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.state.identities), {}, {\n        [selectedAddress]: mergedState\n      })\n    });\n    return mergedState;\n  }\n  authCredentials(address) {\n    var _this$getAddressState7;\n    const selectedAddress = address || this.state.selectedAddress;\n    const jwtToken = ((_this$getAddressState7 = this.getAddressState(selectedAddress)) === null || _this$getAddressState7 === void 0 ? void 0 : _this$getAddressState7.jwtToken) || \"\";\n    return {\n      jwtToken,\n      publicAddress: selectedAddress\n    };\n  }\n  headers(address) {\n    var _this$getAddressState8;\n    const selectedAddress = address || this.state.selectedAddress;\n    return getHeaders(((_this$getAddressState8 = this.getAddressState(selectedAddress)) === null || _this$getAddressState8 === void 0 ? void 0 : _this$getAddressState8.jwtToken) || \"\", selectedAddress);\n  }\n}\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[\"approved\"] = \"approved\";\n  TransactionStatus[\"cancelled\"] = \"cancelled\";\n  TransactionStatus[\"cancelling\"] = \"cancelling\";\n  TransactionStatus[\"confirmed\"] = \"confirmed\";\n  TransactionStatus[\"failed\"] = \"failed\";\n  TransactionStatus[\"finalized\"] = \"finalized\";\n  TransactionStatus[\"processed\"] = \"processed\";\n  TransactionStatus[\"rejected\"] = \"rejected\";\n  TransactionStatus[\"signed\"] = \"signed\";\n  TransactionStatus[\"submitted\"] = \"submitted\";\n  TransactionStatus[\"unapproved\"] = \"unapproved\";\n  TransactionStatus[\"dropped\"] = \"dropped\";\n  TransactionStatus[\"expired\"] = \"expired\";\n  TransactionStatus[\"pending\"] = \"pending\";\n  return TransactionStatus;\n}({});\nconst TRANSACTION_TYPES = {\n  CANCEL: \"cancel\",\n  RETRY: \"retry\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  WASM_BASED_DEPLOY: \"wasmBasedDeploy\",\n  STANDARD_TRANSACTION: \"transaction\",\n  STANDARD_PAYMENT_TRANSACTION: \"payment_transaction\",\n  // specific to chains like solana and casper\n  SENT_ETHER: \"sentEther\",\n  TOKEN_METHOD_TRANSFER: \"transfer\",\n  TOKEN_METHOD_TRANSFER_FROM: \"transferFrom\",\n  TOKEN_METHOD_APPROVE: \"approve\",\n  COLLECTIBLE_METHOD_SAFE_TRANSFER_FROM: \"safeTransferFrom\",\n  SET_APPROVAL_FOR_ALL: \"setApprovalForAll\"\n};\nconst TX_EVENTS = {\n  TX_WARNING: \"tx:warning\",\n  TX_ERROR: \"tx:error\",\n  TX_FAILED: \"tx:failed\",\n  TX_CONFIRMED: \"tx:confirmed\",\n  TX_DROPPED: \"tx:dropped\",\n  TX_EXPIRED: \"tx:expired\",\n  TX_STATUS_UPDATE: \"tx:status_update\",\n  TX_UNAPPROVED: \"tx:unapproved\",\n  TX_RETRY: \"tx:retry\",\n  TX_BLOCK_UPDATE: \"tx:block_update\"\n};\n\n/**\n * Transaction controller configuration\n */\n\n/**\n * Transaction controller state\n */\n\n/**\n * Result\n *\n * result - Promise resolving to a new transaction hash\n * transactionMeta - Meta information about this new transaction\n */\n\nclass BaseTransactionStateManager extends BaseController {\n  constructor({\n    config,\n    state,\n    getCurrentChainId\n  }) {\n    super({\n      config,\n      state\n    });\n    _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"getCurrentChainId\", void 0);\n    this.defaultConfig = {\n      txHistoryLimit: 40\n    };\n    this.defaultState = {\n      transactions: {},\n      unapprovedTxs: {},\n      currentNetworkTxsList: []\n    };\n    this.initialize();\n    this.getCurrentChainId = getCurrentChainId;\n  }\n  getUnapprovedTxList() {\n    const chainId = this.getCurrentChainId();\n    return pickBy(this.state.transactions, transaction => transaction.status === TransactionStatus.unapproved && transactionMatchesNetwork(transaction, chainId));\n  }\n  getTransaction(txId) {\n    const {\n      transactions\n    } = this.state;\n    return transactions[txId];\n  }\n  updateTransaction(txMeta) {\n    // commit txMeta to state\n    const txId = txMeta.id;\n    txMeta.updated_at = new Date().toISOString();\n    this.update({\n      transactions: _babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()(_babel_runtime_helpers_objectSpread2__WEBPACK_IMPORTED_MODULE_0___default()({}, this.state.transactions), {}, {\n        [txId]: txMeta\n      })\n    });\n  }\n  setTxStatusRejected(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.rejected);\n    this._deleteTransaction(txId);\n  }\n\n  /**\n   * The implementing controller can override this functionality and add custom logic + call super.()\n   */\n  setTxStatusUnapproved(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.unapproved);\n  }\n  setTxStatusApproved(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.approved);\n  }\n  setTxStatusSigned(txId, isFinalStep) {\n    this._setTransactionStatus(txId, TransactionStatus.signed, isFinalStep);\n  }\n  setTxStatusSubmitted(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.submitted);\n  }\n  setTxStatusDropped(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.dropped);\n  }\n  setTxStatusExpired(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.expired);\n  }\n  setTxStatusConfirmed(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.confirmed);\n  }\n  setTxStatusFailed(txId, error_) {\n    const error = !error_ ? new Error(\"Internal torus failure\") : error_;\n    const txMeta = this.getTransaction(txId);\n    txMeta.error = error;\n    this.updateTransaction(txMeta);\n    this._setTransactionStatus(txId, TransactionStatus.failed);\n  }\n\n  /**\n   * Method to determine if the transaction is in a final state\n   * @param status - Transaction status\n   * @returns boolean if the transaction is in a final state\n   */\n  isFinalState(status) {\n    return status === TransactionStatus.rejected || status === TransactionStatus.submitted || status === TransactionStatus.confirmed || status === TransactionStatus.failed || status === TransactionStatus.cancelled || status === TransactionStatus.expired;\n  }\n\n  /**\n   * Filters out the unapproved transactions from state\n   */\n  clearUnapprovedTxs() {\n    this.update({\n      transactions: omitBy(this.state.transactions, transaction => transaction.status === TransactionStatus.unapproved)\n    });\n  }\n\n  /**\n   * will append new transactions to old txns.\n   */\n  _addTransactionsToState(transactions) {\n    this.update({\n      transactions: transactions.reduce((result, newTx) => {\n        result[newTx.id] = newTx;\n        return result;\n      }, this.state.transactions)\n    });\n  }\n\n  /**\n   * will set new txns, override existing if any in state.\n   */\n  _setTransactionsToState(transactions) {\n    this.update({\n      transactions: transactions.reduce((result, newTx) => {\n        result[newTx.id] = newTx;\n        return result;\n      }, {})\n    });\n  }\n  _deleteTransaction(targetTransactionId) {\n    const {\n      transactions\n    } = this.state;\n    delete transactions[targetTransactionId];\n    this.update({\n      transactions\n    });\n  }\n  _deleteTransactions(targetTransactionIds) {\n    const {\n      transactions\n    } = this.state;\n    targetTransactionIds.forEach(transactionId => {\n      delete transactions[transactionId];\n    });\n    this.update({\n      transactions\n    });\n  }\n  _setTransactionStatus(txId, status, isFinalStep) {\n    const txMeta = this.getTransaction(txId);\n    if (!txMeta) {\n      return;\n    }\n    txMeta.status = status;\n    // only updating status so no validation required on txn.\n    this.updateTransaction(txMeta);\n    this.emit(TX_EVENTS.TX_STATUS_UPDATE, {\n      txId,\n      status\n    });\n    if (this.isFinalState(status) || isFinalStep) {\n      this.emit(`${txMeta.id}:finished`, txMeta);\n    } else {\n      this.emit(`${txMeta.id}:${status}`, txId);\n    }\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@toruslabs+base-controllers_31c992c0278678d96be0c00843c9f41f/node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js\n");

/***/ })

};
;